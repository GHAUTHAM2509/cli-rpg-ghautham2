use std::thread::sleep;
use std::time::Duration;

pub fn animate_ascii_art() {
    let ascii_art1 = r#"
    .___  ___. ____    ____  _______..___________. _______ .______     ____    ____
    |   \/   | \   \  /   / /       ||           ||   ____||   _  \    \   \  /   /
    |  \  /  |  \   \/   / |   (----``---|  |----`|  |__   |  |_)  |    \   \/   /
    |  |\/|  |   \_    _/   \   \        |  |     |   __|  |      /      \_    _/
    |  |  |  |     |  | .----)   |       |  |     |  |____ |  |\  \----.   |  |
    |__|  |__|     |__| |_______/        |__|     |_______|| _| `._____|   |__|

    ______    _______    .___________. __    __   _______
    /  __  \  |   ____|   |           ||  |  |  | |   ____|
    |  |  |  | |  |__      `---|  |----`|  |__|  | |  |__
    |  |  |  | |   __|         |  |     |   __   | |   __|
    |  `--'  | |  |            |  |     |  |  |  | |  |____
    \______/  |__|            |__|     |__|  |__| |_______|

    _______   ______   .______        _______   ______   .___________..___________. _______ .__   __.
    |   ____| /  __  \  |   _  \      /  _____| /  __  \  |           ||           ||   ____||  \ |  |
    |  |__   |  |  |  | |  |_)  |    |  |  __  |  |  |  | `---|  |----``---|  |----`|  |__   |   \|  |
    |   __|  |  |  |  | |      /     |  | |_ | |  |  |  |     |  |         |  |     |   __|  |  . `  |
    |  |     |  `--'  | |  |\  \----.|  |__| | |  `--'  |     |  |         |  |     |  |____ |  |\   |
    |__|      \______/  | _| `._____| \______|  \______/      |__|         |__|     |_______||__| \__|
    "#;

    let ascii_art2 = r#"
     __  .___  ___. .______     ______        _______.     _______. __  .______    __       _______    
    |  | |   \/   | |   _  \   /  __  \      /       |    /       ||  | |   _  \  |  |     |   ____|   
    |  | |  \  /  | |  |_)  | |  |  |  |    |   (----`   |   (----`|  | |  |_)  | |  |     |  |__      
    |  | |  |\/|  | |   ___/  |  |  |  |     \   \        \   \    |  | |   _  <  |  |     |   __|     
    |  | |  |  |  | |  |      |  `--'  | .----)   |   .----)   |   |  | |  |_)  | |  `----.|  |____    
    |__| |__|  |__| | _|       \______/  |_______/    |_______/    |__| |______/  |_______||_______|   
                                                                                                   

     _______     _______.  ______     ___      .______    _______    .______        ______     ______   .___  ___. 
    |   ____|   /       | /      |   /   \     |   _  \  |   ____|   |   _  \      /  __  \   /  __  \  |   \/   | 
    |  |__     |   (----`|  ,----'  /  ^  \    |  |_)  | |  |__      |  |_)  |    |  |  |  | |  |  |  | |  \  /  | 
    |   __|     \   \    |  |      /  /_\  \   |   ___/  |   __|     |      /     |  |  |  | |  |  |  | |  |\/|  | 
    |  |____.----)   |   |  `----./  _____  \  |  |      |  |____    |  |\  \----.|  `--'  | |  `--'  | |  |  |  | 
    |_______|_______/     \______/__/     \__\ | _|      |_______|   | _| `._____| \______/   \______/  |__|  |__| 
                                                                                                               

    "#;

    let ascii_art3 = r#"
          _  __________=__         .--.
                \\@([____]_____()             /.-. '----------.
               _/\|-[____]                  \'-' .--"--""-"-'
              /     /(( )                   '--'
             /____|'----'
             \____/      
    "#;

    const ANSI_CLEAR: &str = "\x1B[2J\x1B[1;1H"; // Clear screen and move cursor to top left
    const ANSI_HIDE_CURSOR: &str = "\x1B[?25l"; // Hide cursor
    const ANSI_RESET: &str = "\x1B[0m"; // Reset text color

    // Define different text colors
    const ANSI_TEXT_ORANGE: &str = "\x1B[38;5;214m"; // Orange text color
    const ANSI_TEXT_RED: &str = "\x1B[38;5;196m"; // Red text color
    const ANSI_TEXT_GREEN: &str = "\x1B[38;5;46m"; // Green text color

    let frames = 100;
    let delay_ms = 2000; 

    for i in 0..frames {
        let color_code = match i % 2 {
            0 => ANSI_TEXT_ORANGE,
            1 => ANSI_TEXT_RED,
            _ => unreachable!(),
        };
        print!("{}{}{}", ANSI_CLEAR, ANSI_HIDE_CURSOR, color_code);

        match i % 2 {
            0 => {
                println!("{}\n\n{}", ascii_art1, format!("{}{}", ANSI_TEXT_GREEN, ascii_art3));
            }
            1 => {
                println!("{}\n\n{}", ascii_art2, format!("{}{}", ANSI_TEXT_GREEN, ascii_art3));
            }
            _ => unreachable!(),
        }
        sleep(Duration::from_millis(delay_ms as u64));
    }
    sleep(Duration::from_secs(1));
    // Reset text color and show cursor at the end
    print!("{}{}", ANSI_RESET, "\x1B[?25h");
}